// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.2'
    }
}
allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: 'com.android.library'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
}

dependencies {
    // library project
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //    compile fileTree(dir: 'kit-libs', include: ['*.jar'])
    // LibUtils custom libraries
    compile project('kit-libs:LibPullToRefresh')
    compile project('kit-libs:LibVolley')
    compile project('kit-libs:appcompat')
    // jackson dependencies
    compile 'com.fasterxml.jackson.core:jackson-core:2.5.2@jar'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.5.2@jar'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.5.2@jar'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// library copy setting
task copyLibs(type : Copy) {
    configurations.compile.each {
        from it.toString()
        into 'libs'
        exclude {
            new File('libs', it.name).exists()
        }
    }
}

// findbugs setting
task findbugs(type: FindBugs) {
    ignoreFailures = true
    effort = "max"
    reportLevel = "low" // ÅñÇ«ÇÃÉåÉxÉãÇÃïÒçêÇ‹Ç≈ëŒâûÇ∑ÇÈÇ©Ç≈ïœçXÅñ
    excludeFilter = new File("${project.rootDir}/config/findbugs/android_findbugs_filter.xml")
    classes = files("build/intermediates/classes/")
    source 'src/main'
    include '**/*.java'
    reports {
        xml {
            destination "${project.rootDir}/build/reports/findbugs_report.xml"
        }
    }
    classpath = files()
}
